import base64
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from socketserver import ThreadingMixIn

from elementum.config import PROXY_SETTINGS
from six.moves import urllib_request

TMDB_PROXY_HOSTNAME = "localhost"
TMDB_PROXY_PORT = 8081
TMDB_IMAGE_URL = "https://image.tmdb.org"
TMDB_PROXY_URL = "http://" + TMDB_PROXY_HOSTNAME + ":" + str(TMDB_PROXY_PORT)


ELEMENTUM_PROXY = PROXY_SETTINGS.get("proxy_host", "") + ":" + str(PROXY_SETTINGS.get("proxy_port"))
ELEMENTUM_PROXY_AUTH = PROXY_SETTINGS.get("proxy_login", "") + ":" + PROXY_SETTINGS.get("proxy_password")

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """Handles requests in a separate thread"""

class TmdbImageProxyServer(BaseHTTPRequestHandler):
    def _send_headers(self):
        response = self.get_tmdb_image()
        self.send_response(response.code)
        for k, v in response.headers.items():
            self.send_header(k, v)
        self.send_header("Server-Thread", threading.current_thread().name)
        self.send_header("Active-Threads", str(threading.active_count()))
        self.end_headers()
        return response

    def do_HEAD(self):
        self._send_headers()

    def do_GET(self):
        self.wfile.write(self._send_headers().read())

    def get_tmdb_image(self):
        req = urllib_request.Request(TMDB_IMAGE_URL + self.path)
        if PROXY_SETTINGS:
            req.set_proxy(
                host=ELEMENTUM_PROXY,
                type=PROXY_SETTINGS["proxy_type"].lower())
            if PROXY_SETTINGS.get("proxy_password"):
                req.add_header(
                    key="Proxy-Authorization",
                    val="Basic " + base64.b64encode(ELEMENTUM_PROXY_AUTH.encode("ascii")).decode("ascii")
                )
        req.add_unredirected_header("Host", "image.tmdb.org")
        return urllib_request.urlopen(req, timeout=10)


def run():
    web_server = ThreadedHTTPServer((TMDB_PROXY_HOSTNAME, TMDB_PROXY_PORT), TmdbImageProxyServer)
    try:
        web_server.serve_forever()
    except KeyboardInterrupt:
        pass
    web_server.server_close()
